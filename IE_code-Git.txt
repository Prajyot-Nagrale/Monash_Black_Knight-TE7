
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>Demo: Route finding with the Directions API and Turf.js</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <!-- Import Mapbox GL JS -->
    <script src="https://api.tiles.mapbox.com/mapbox-gl-js/v2.2.0/mapbox-gl.js"></script>
    <link href="https://api.tiles.mapbox.com/mapbox-gl-js/v2.2.0/mapbox-gl.css" rel="stylesheet" />

    <!-- Import Mapbox GL Directions -->
    <script
        src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.0.2/mapbox-gl-directions.js"></script>
    <link rel="stylesheet"
        href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.0.2/mapbox-gl-directions.css"
        type="text/css" />

    <!-- Import Turf & Polyline -->
    <script src="https://npmcdn.com/@turf/turf/turf.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mapbox-polyline/1.1.1/polyline.js"></script>

    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 100%;
        }

        .sidebar {
            position: absolute;
            margin: 20px 20px 30px 20px;
            width: 25%;
            top: 0;
            bottom: 0;
            padding: 20px;
            background-color: #ffffff;
            overflow-y: scroll;
            font-family: Open Sans, sans-serif;
        }

        .card {
            display: inline-block;
            font-size: small;
            border-bottom: solid #d3d3d3 2px;
            margin-bottom: 6px;
            width: 100%;
        }

        .card-header {
            font-weight: bold;
            padding: 6px;
            font-weight: bold;
        }

        .no-route {
            background-color: #d3d3d3;
            color: #ff0000;
        }

        .camera-found {
            background-color: #d3d3d3;
            color: #ffffff;
        }

        .route-found {
            background-color: #4169E1;
            color: #ffffff;
        }

        .card-details {
            padding: 3px 6px;
        }
    </style>
</head>

<body>
    <div id="map"></div>
    <div class="sidebar">
        <h3>Safety Route</h3>
        <div id="reports"></div>
    </div>





    <script>
        mapboxgl.accessToken = 'pk.eyJ1IjoibGlnYW9oZSIsImEiOiJja2VvMThxeGowNGNzMnptd2FycGZjenJ1In0.AJNLJ5y58jHMnwbsZpCAQQ';
        let map = new mapboxgl.Map({
            container: 'map', // Specify the container ID
            style: 'mapbox://styles/ligaohe/cko57ljq71xuf17pbcbd2u6sa', // Specify which map style to use
            center: [144.9631, -37.8136], // Specify the starting position [lng, lat]
            zoom: 13 // Specify the starting zoom
        });

        let directions = new MapboxDirections({
            accessToken: mapboxgl.accessToken,
            unit: 'metric',
            profile: 'mapbox/walking',
            alternatives: false,
            geometries: 'geojson',
            controls: { instructions: true },
            flyTo: false
        });

        map.addControl(directions, 'top-right');
        map.scrollZoom.enable();

 
		let all = {type:"FeatureCollection",features:sensors.features.concat(lights.features)}
        const total = turf.buffer(all, 0.15, { units: 'kilometers' });
        let bbox = [0, 0, 0, 0];
        let polygon = turf.bboxPolygon(bbox);

        map.on('load', function () {
			map.loadImage(
				'https://image.flaticon.com/icons/png/128/2933/2933760.png',
				function (error, image) {
					if (error) throw error;

					// Add the image to the map style.
					map.addImage('camera', image);

					map.addLayer({
						id: 'sensors',
						type: 'symbol',
						source: {
							type: 'geojson',
							data: sensors
						},
						layout: {'icon-image':'camera','icon-size': 0.15,'icon-allow-overlap': true}
					});
				}
			);
			map.loadImage(
				'https://image.flaticon.com/icons/png/128/1633/1633386.png',
				function (error, image) {
					if (error) throw error;

					// Add the image to the map style.
					map.addImage('lamp', image);

					map.addLayer({
						id: 'lamps',
						type: 'symbol',
						source: {
							type: 'geojson',
							data: lights
						},
						layout: {'icon-image':'lamp','icon-size': 0.15,'icon-allow-overlap': true}
					});
				}
			);

            map.addSource('theRoute', {
                type: 'geojson',
                data: {
                    type: 'Feature'
                }
            });

            map.addLayer({
                id: 'theRoute',
                type: 'line',
                source: 'theRoute',
                layout: {
                    'line-join': 'round',
                    'line-cap': 'round'
                },
                paint: {
                    'line-color': '#FFCC00',
                    'line-opacity': 0.5,
                    'line-width': 13,
                    'line-blur': 0.5
                }
            });

            // Source and layer for the bounding box
            map.addSource('theBox', {
                type: 'geojson',
                data: {
                    type: 'Feature'
                }
            });
            map.addLayer({
                id: 'theBox',
                type: 'fill',
                source: 'theBox',
                layout: {},
                paint: {
                    'fill-color': '#FFC300',
                    'fill-opacity': 0.5,
                    'fill-outline-color': '#FFC300'
                }
            });
			
        });

        let counter = 0;
        let maxAttempts = 10;
        let emoji = '';
        let collision = '';

        let addCard = function (id, element, clear, detail) {
            let card = document.createElement('div');
            card.className = 'card';
            // Add the response to the individual report created above
            let heading = document.createElement('div');
            // Set the class type based on clear value
            if (clear == false) {
                heading.className = 'card-header route-found';
            } else {
                heading.className = 'card-header camera-found';
            }

            if (id == 0) {
                heading.innerHTML = emoji + ' The route ' + collision;
            } else {
                heading.innerHTML = emoji + ' Route ' + id + ' ' + collision;
            }

            let details = document.createElement('div');
            details.className = 'card-details';
            details.innerHTML = ' It ' + detail;

            card.appendChild(heading);
            card.appendChild(details);
            element.insertBefore(card, element.firstChild);
        };

        let noRoutes = function (element) {
            let card = document.createElement('div');
            card.className = 'card';
            // Add the response to the individual report created above
            let heading = document.createElement('div');
            heading.className = 'card-header no-route';
            emoji = '🛑';
            heading.innerHTML = emoji + ' Ending search.';

            // Add details to the individual report
            let details = document.createElement('div');
            details.className = 'card-details';
            details.innerHTML = 'No clear route found in ' + counter + ' tries.';

            card.appendChild(heading);
            card.appendChild(details);
            element.insertBefore(card, element.firstChild);
        };

        directions.on('clear', function () {
            map.setLayoutProperty('theRoute', 'visibility', 'none');
            map.setLayoutProperty('theBox', 'visibility', 'none');

            counter = 0;
            reports.innerHTML = '';
        });

        directions.on('route', function (e) {
            let reports = document.getElementById('reports');
            let routes = e.route;

            // Hide the route and box by setting the opacity to zero
            map.setLayoutProperty('theRoute', 'visibility', 'none');
            map.setLayoutProperty('theBox', 'visibility', 'none');

            if (counter >= maxAttempts) {
                noRoutes(reports);
                counter = 0;
            } else {
                // Make each route visible
                routes.forEach((e) => {
                    // Make each route visible
                    map.setLayoutProperty('theRoute', 'visibility', 'visible');
                    map.setLayoutProperty('theBox', 'visibility', 'visible');

                    // Get GeoJson LineString feature of route
                    let routeLine = polyline.toGeoJSON(e.geometry);
                    let intersects = turf.lineIntersect(total, routeLine);

                    // Create a bounding box around this route
                    // The app will find a random point in the new bbox
                    bbox = turf.bbox(routeLine);
                    polygon = turf.bboxPolygon(bbox);

                    // Update the data for the route
                    // This will update the route line on the map
                    map.getSource('theRoute').setData(routeLine);

                    // Update the box
                    map.getSource('theBox').setData(polygon);

                    let clear = turf.booleanDisjoint(total, routeLine);

                    if (clear == false) {
                        collision = 'meets Security Cameras or Street Lights';
                        detail =
                            'will take ' + (e.duration / 60).toFixed(0) + ' minutes. ';
                        emoji = '✔️';
                        map.setPaintProperty('theRoute', 'line-color', '#74c476');
                        // Hide the box
                        map.setLayoutProperty('theBox', 'visibility', 'none');
                        // Reset the counter
                        counter = 0;
                    } else {
                        // Collision occurred, so increment the counter
                        counter = counter + 1;
                        // As the attempts increase, expand the search area
                        // by a factor of the attempt count
                        polygon = turf.transformScale(polygon, counter * 0.01);
                        bbox = turf.bbox(polygon);
                        collision = 'is not good. No any Security Cameras or Street Lights';
                        detail =
                            'will take ' + (e.duration / 60).toFixed(0) + ' minutes.';
                        emoji = '👀';
                        map.setPaintProperty('theRoute', 'line-color', '#FFCC00');

                        // Add a randomly selected waypoint to get a new route from the Directions API
                        let randomWaypoint = turf.randomPoint(1, { bbox: bbox });
                        directions.setWaypoint(
                            0,
                            randomWaypoint['features'][0].geometry.coordinates
                        );
                    }
                    // Add a new report section to the sidebar
                    addCard(counter, reports, clear, detail);
                });
            }
        });
    </script>
</body>

</html>